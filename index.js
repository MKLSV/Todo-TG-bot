import 'dotenv/config';
import { Telegraf, Markup } from 'telegraf';
import axios from 'axios';
import fs from 'fs';
import ffmpeg from 'fluent-ffmpeg';
import ffmpegPath from "ffmpeg-static";
import fetch from 'node-fetch';
import vosk from 'vosk';
import { getData, dateToTimestamp, formateMsg } from './service.js';

ffmpeg.setFfmpegPath(ffmpegPath);

const MODEL_PATH = "./model";
if (!fs.existsSync(MODEL_PATH)) {
    console.error("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π –º–æ–¥–µ–ª—å Vosk –∏ —Ä–∞—Å–ø–∞–∫—É–π –≤ –ø–∞–ø–∫—É ./model");
    process.exit(1);
}
vosk.setLogLevel(0);
const model = new vosk.Model(MODEL_PATH);

const token = process.env.token;
const TELEGRAM_CHAT_MT = process.env.TELEGRAM_CHAT_MT;
const TELEGRAM_CHAT_DEA = process.env.TELEGRAM_CHAT_DEA;

const bot = new Telegraf(token);


// ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----------
const userStates = {};

// ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
const menuKeyboard = Markup.keyboard([
    ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏'],
    ['–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É']
]).resize();

// ---------- –ö–æ–º–∞–Ω–¥—ã ----------
bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?', menuKeyboard));

bot.on('text', async (ctx) => {
    const chatId = ctx.chat.id;
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (chatId != TELEGRAM_CHAT_MT && chatId != TELEGRAM_CHAT_DEA) {
        return ctx.reply('–ö—Ç–æ —Ç—ã, –≤–æ–∏–Ω? üòé');
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (userStates[chatId]) return handleDialogState(ctx, text);

    // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    switch (text) {
        case '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏':
            {
                const tasks = await getData(chatId);
                if (!tasks.length)
                    return ctx.reply('–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è... –ö–∞–π—Ñ—É–π üòé');
                await ctx.reply('–í–æ—Ç –≤–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:');
                await ctx.reply(await formateMsg(tasks));
            }
            break;

        case '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É':
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:',
                Markup.inlineKeyboard([
                    [Markup.button.callback('–î–ª—è –≤—Å–µ—Ö', 'recipient_–î–ª—è –≤—Å–µ—Ö')],
                    [Markup.button.callback('–ú–∞—Ç–≤–µ–π', 'recipient_–ú–∞—Ç–≤–µ–π')],
                    [Markup.button.callback('–î–µ–ª–∞–π–ª–∞', 'recipient_–î–µ–ª–∞–π–ª–∞')]
                ])
            );
            break;

        case '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É':
            {
                const tasks = await getData(chatId);
                if (!tasks.length)
                    return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!');

                await ctx.reply(
                    '–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É:',
                    Markup.inlineKeyboard(
                        tasks.map((task) => [
                            Markup.button.callback(task.text, `complete_${task._id}`)
                        ])
                    )
                );
            }
            break;

        default:
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', menuKeyboard);
    }
});

// ---------- Inline callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------
bot.on('callback_query', async (ctx) => {
    const data = ctx.callbackQuery.data;
    const chatId = ctx.chat.id;

    if (data.startsWith('recipient_')) {
        const recipient = data.split('_')[1];
        userStates[chatId] = { step: 'enter_task', data: { recipient } };
        await ctx.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:');
    }

    if (data === 'date_yes') {
        userStates[chatId].step = 'enter_date';
        await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
    }

    if (data === 'date_no') {
        userStates[chatId].data.date = null;
        userStates[chatId].step = 'confirmation';
        await sendConfirmation(ctx);
    }

    if (data === 'confirm_yes') {
        await saveTask(userStates[chatId].data);
        delete userStates[chatId];
        await ctx.editMessageText('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    }

    if (data === 'confirm_no') {
        delete userStates[chatId];
        await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    }

    if (data.startsWith('complete_')) {
        const id = data.split('_')[1];
        const tasks = await getData(chatId);
        const task = tasks.find((t) => t._id.toString() === id);
        if (!task) return ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

        const updated = { ...task, isCompleted: true, completedAt: Date.now() };
        try {
            await axios.put(
                `https://to-do-do-next-red.vercel.app/api/tasks/${updated._id}`,
                updated
            );
            await ctx.reply(`–ó–∞–¥–∞—á–∞ "${updated.text}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ü•≥`);
            await ctx.replyWithAnimation(
                'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmNpdmNsdXliN2pucmNtcnBnaTdoMDJ2MGM2bDAxZDdhd3AzaTR6YiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/s2qXK8wAvkHTO/giphy.gif'
            );
        } catch {
            await ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ—Ä—è–Ω...');
        }
    }

    await ctx.answerCbQuery();
});

// ---------- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----------

bot.on("voice", async (ctx) => {
    try {
        const fileId = ctx.message.voice.file_id;
        const chatId = ctx.chat.id;
        const fileLink = await ctx.telegram.getFileLink(fileId);

        // 1Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (.oga)
        const res = await fetch(fileLink.href);
        const buffer = Buffer.from(await res.arrayBuffer());
        fs.writeFileSync("voice.oga", buffer);

        // 2Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV (16kHz, –º–æ–Ω–æ)
        await new Promise((resolve, reject) => {
            ffmpeg("voice.oga")
                .audioFrequency(16000)
                .audioChannels(1)
                .format("wav")
                .on("end", resolve)
                .on("error", reject)
                .save("voice.wav");
        });

        // 3Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
        const rec = new vosk.Recognizer({ model: model, sampleRate: 16000 });
        const data = fs.readFileSync("voice.wav");
        rec.acceptWaveform(data);
        const result = rec.finalResult();
        rec.free();

        const text = result.text || "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å";
        if (text === "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å") {
            await ctx.reply(`"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"`);
        } else {
            const taskData = parseTaskText(text)
            userStates[chatId] = {
                data: {
                    recipient: chatId == TELEGRAM_CHAT_MT ? "–ú–∞—Ç–≤–µ–π" : "–î–µ–ª–∞–π–ª–∞",
                    task: taskData.task,
                    date: taskData.date
                }
            }
            if (taskData.type === '–¥–æ–±–∞–≤—å') {
                await sendConfirmation(ctx)
            } else {
                await ctx.reply(`üó£ –ù–µ –ø–æ–Ω—è–ª –∑–∞–¥–∞—á—É: ${text}`);
                await ctx.reply(`–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—á–∞—á—É, —Å–∫–∞–∂–∏ —á—Ç–æ —Ç–æ –≤ —Ä–æ–¥–µ:`);
                await ctx.reply(`–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞ 15–≥–æ –æ–∫—Ç—è–±—Ä—è –±–∞–ª–∞—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–∑–µ–¥–µ–Ω—Ç—ã`);
            }
            console.log(taskData)
        }


    } catch (e) {
        console.error(e);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }
});

// ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------
async function handleDialogState(ctx, text) {
    const chatId = ctx.chat.id;
    const state = userStates[chatId];

    if (state.step === 'enter_task') {
        state.data.task = text;
        state.step = 'ask_date';
        await ctx.reply(
            '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?',
            Markup.inlineKeyboard([
                [Markup.button.callback('–î–∞', 'date_yes')],
                [Markup.button.callback('–ù–µ—Ç', 'date_no')]
            ])
        );
    } else if (state.step === 'enter_date') {
        if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {

            state.data.date = text;
            state.step = 'confirmation';
            await sendConfirmation(ctx);
        } else {
            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
        }
    }
}

// ---------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ----------
async function sendConfirmation(ctx) {
    const chatId = ctx.chat.id;
    const { recipient, task, date } = userStates[chatId].data;

    const message = `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:\n\nüë• –î–ª—è: ${recipient}\nüìù ${task}\nüìÖ ${date || '–ë–µ–∑ –¥–∞—Ç—ã'}`;
    await ctx.reply(
        message,
        Markup.inlineKeyboard([
            [Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_yes')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'confirm_no')]
        ])
    );
}

// ---------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ----------
async function saveTask(taskData) {
    console.log(taskData.date)
    const timestamp = taskData.date ? dateToTimestamp(taskData.date) : null;
    const payload = {
        owner: taskData.recipient,
        type: '–∑–∞–¥–∞—á–∞',
        text: taskData.task,
        dueDate: timestamp,
        repeat: false,
        createdAt: Date.now(),
        isCompleted: false
    };

    try {
        await axios.post('https://to-do-do-next-red.vercel.app/api/tasks', payload);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err.message);
    }
}

function parseTaskText(text) {
    text = text.toLowerCase().trim();

    // –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    let type = "";
    if (text.includes("–¥–æ–±–∞–≤—å") || text.includes("–¥–æ–±–∞–≤–∏—Ç—å") || text.includes("–¥–æ–±–∞–≤–∏–º") || text.includes("–¥–æ–±–∞–≤") || text.includes("–¥–±–∞–≤–∏") || text.includes("–æ–±–∞–≤") || text.includes("–æ–±–∞–≤—å") || text.includes("—Å–æ–∑–¥–∞–π")) type = "–¥–æ–±–∞–≤—å";

    // –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤
    const months = {
        —è–Ω–≤–∞—Ä—è: "01", —Ñ–µ–≤—Ä–∞–ª—è: "02", –º–∞—Ä—Ç–∞: "03", –∞–ø—Ä–µ–ª—è: "04",
        –º–∞—è: "05", –∏—é–Ω—è: "06", –∏—é–ª—è: "07", –∞–≤–≥—É—Å—Ç–∞: "08",
        —Å–µ–Ω—Ç—è–±—Ä—è: "09", –æ–∫—Ç—è–±—Ä—è: "10", –Ω–æ—è–±—Ä—è: "11", –¥–µ–∫–∞–±—Ä—è: "12"
    };

    // üìÖ –ü–æ–∏—Å–∫ –¥–∞—Ç—ã (—Ü–∏—Ñ—Ä–æ–≤–∞—è –∏–ª–∏ —Å–ª–æ–≤–µ—Å–Ω–∞—è)
    let date = null;
    const dateMatch = text.match(/(\d{1,2})[.\s]*(\d{1,2})[.\s]*(\d{2,4})/);
    if (dateMatch) {
        const [_, d, m, y] = dateMatch;
        date = `${y.length === 2 ? "20" + y : y}-${m.padStart(2, "0")}-${d.padStart(2, "0")}`;
    } else {
        const wordDate = text.match(/(\d{1,2}|–ø–µ—Ä–≤–æ–µ|–≤—Ç–æ—Ä–æ–µ|—Ç—Ä–µ—Ç—å–µ|—á–µ—Ç–≤–µ—Ä—Ç–æ–µ|–ø—è—Ç–æ–µ|—à–µ—Å—Ç–æ–µ|—Å–µ–¥—å–º–æ–µ|–≤–æ—Å—å–º–æ–µ|–¥–µ–≤—è—Ç–æ–µ|–¥–µ—Å—è—Ç–æ–µ|–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ|–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ|—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ|—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ|–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ|—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ|—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ|–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ|–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ|–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–µ|–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–µ|—Ç—Ä–∏–¥—Ü–∞—Ç–æ–µ|—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ)\s+([–∞-—è]+)/);
        if (wordDate && months[wordDate[2]]) {
            const day = wordToNumber(wordDate[1]);
            const month = months[wordDate[2]];
            const year = new Date().getFullYear();
            date = `${String(day).padStart(2, "0")}.${month}.${year}`;
        }
    }

    // ‚úèÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–±–µ–∑ "–∑–∞–¥–∞—á–∞", "–∑–∞–¥–∞—á—É" –∏ —Ç.–¥.)
    let task = text
        .replace(/–¥–æ–±–∞–≤—å|—Å–æ–∑–¥–∞–π/gi, "")
        .replace(/–∑–∞–¥–∞—á[–∞—É—ã–∏]/gi, "") // ‚Üê —É–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞ "–∑–∞–¥–∞—á–∞"
        .replace(/–Ω–∞\s+\d{1,2}[.\s]\d{1,2}[.\s]\d{2,4}/gi, "")
        .replace(/–Ω–∞\s+[–∞-—è]+\s+[–∞-—è]+/gi, "")
        .trim();

    return { type, date, task };
}

// üî¢ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–æ–≤–µ—Å–Ω—ã—Ö —á–∏—Å–µ–ª
function wordToNumber(word) {
    const map = {
        –ø–µ—Ä–≤–æ–µ: 1, –≤—Ç–æ—Ä–æ–µ: 2, —Ç—Ä–µ—Ç—å–µ: 3, —á–µ—Ç–≤–µ—Ä—Ç–æ–µ: 4, –ø—è—Ç–æ–µ: 5,
        —à–µ—Å—Ç–æ–µ: 6, —Å–µ–¥—å–º–æ–µ: 7, –≤–æ—Å—å–º–æ–µ: 8, –¥–µ–≤—è—Ç–æ–µ: 9, –¥–µ—Å—è—Ç–æ–µ: 10,
        –æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ: 11, –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ: 12, —Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ: 13, —á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ: 14,
        –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ: 15, —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ: 16, —Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ: 17, –≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ: 18,
        –¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ: 19, –¥–≤–∞–¥—Ü–∞—Ç–æ–µ: 20, '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ': 21, '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–µ': 22,
        '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ': 23, '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–µ': 24, '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–µ': 25,
        '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–µ': 26, '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–µ': 27, '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–µ': 28,
        '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–µ': 29, —Ç—Ä–∏–¥—Ü–∞—Ç–æ–µ: 30, '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ': 31
    };
    return map[word] || parseInt(word);
}

// ---------- –ó–∞–ø—É—Å–∫ ----------
bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Telegraf!');
