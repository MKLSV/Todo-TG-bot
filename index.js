require('dotenv').config()

const axios = require('axios')
const TelegramBot = require('node-telegram-bot-api');

const { getData, dateToTimestamp, formateMsg } = require('./service');

const token = "8022738459:AAHqxjyrBwhVFVAU9Q1925rzSC9gEanEtbY"
const TELEGRAM_CHAT_MT = "555207329"
const TELEGRAM_CHAT_DEA = "644190724"

const bot = new TelegramBot(token, { polling: true });

const userStates = {};

const menuKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏' }], [{ text: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' }, { text: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É' }]
        ],
        // resize_keyboard: true,
        one_time_keyboard: false
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑)
bot.on('message', async (msg) => {
    // –í–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    const chatId = msg.chat.id;
    const text = msg.text;

    if (chatId != TELEGRAM_CHAT_MT && chatId != TELEGRAM_CHAT_DEA) {
        console.log(chatId)
        await bot.sendMessage(chatId, '–ö—Ç–æ —Ç—ã –≤–æ–π–Ω???');
        return
    }
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    if (userStates[chatId]) {
        handleDialogState(chatId, text);
        return;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (text === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏') {
        const tasks = await getData(chatId)
        if (tasks == 0) {
            await bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è... –ö–∞–π—Ñ—É–π, –æ—Ç–¥—ã—Ö–∞–πüòé');
        } else {
            const formatedTasks = await formateMsg(tasks)
            await bot.sendMessage(chatId, '–í–æ—Ç –≤–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:');
            await bot.sendMessage(chatId, formatedTasks);
        }
    }
    if (text === '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') {
        await bot.sendMessage(chatId, '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', {
            reply_markup: {
                inline_keyboard: [[{
                    text: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
                    callback_data: 'start_task_creation'
                }]]
            }
        });
    }
    if (text === '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É') {
        await bot.sendMessage(chatId, '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', {
            reply_markup: {
                inline_keyboard: [[{
                    text: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É',
                    callback_data: 'start_complited_task'
                }]]
            }
        });
    }
    else {
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', menuKeyboard);
    }
    // await bot.sendMessage(chatId, menuKeyboard);
});

bot.on('callback_query', async (callbackQuery) => {
    // –í–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (data === 'start_task_creation') {
        userStates[chatId] = {
            step: 'select_task',
            data: {}
        };

        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–î–ª—è –≤—Å–µ—Ö', callback_data: 'recipient_–î–ª—è –≤—Å–µ—Ö' }],
                    [{ text: '–ú–∞—Ç–≤–µ–π', callback_data: 'recipient_–ú–∞—Ç–≤–µ–π' }],
                    [{ text: '–î–µ–ª–∞–π–ª–∞', callback_data: 'recipient_–î–µ–ª–∞–π–ª–∞' }]
                ]
            }
        });
    }
    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (data === 'start_complited_task') {
        const tasks = await getData(chatId)
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É:', {
            reply_markup: {
                inline_keyboard: tasks.map(task => [{
                    text: task.text,
                    callback_data: `complete_${task._id}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
                }])
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if (data.startsWith('complete_')) {
        const complitedTaskId = data.split('_')[1];
        const tasks = await getData(chatId)
        const taskToUpdate = tasks.find(task => (
            task._id == complitedTaskId
        ))
        const updatedTask = { ...taskToUpdate, isCompleted: true, completedAt: Date.now() }
        try {
            await axios.put(`https://to-do-do-next-red.vercel.app/api/tasks/${updatedTask._id}`, updatedTask);
        } catch (e) {
            console.log(e)
            await bot.answerCallbackQuery(callbackQuery.id);
            await bot.sendMessage(chatId, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ä—è–Ω...');
        }
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ ${updatedTask.text} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!ü•≥`);
        await bot.sendAnimation(chatId, 'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmNpdmNsdXliN2pucmNtcnBnaTdoMDJ2MGM2bDAxZDdhd3AzaTR6YiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/s2qXK8wAvkHTO/giphy.gif');
        return
    }

    if (data.startsWith('recipient_')) {
        const recipient = data.split('_')[1];
        userStates[chatId] = {
            step: 'enter_task',
            data: { recipient }
        };

        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –¥–∞—Ç–µ
    if (data === 'date_yes') {
        userStates[chatId].step = 'enter_date';
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
    }

    if (data === 'date_no') {
        userStates[chatId].step = 'confirmation';
        userStates[chatId].data.date = null;
        await bot.answerCallbackQuery(callbackQuery.id);
        sendConfirmation(chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (data === 'confirm_yes') {
        await saveTask(userStates[chatId].data);
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        delete userStates[chatId];
    }

    if (data === 'confirm_no') {
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        delete userStates[chatId];
    }

});
async function handleDialogState(chatId, text) {
    const state = userStates[chatId];

    switch (state.step) {
        case 'enter_task':
            state.data.task = text;
            state.step = 'ask_date';
            await bot.sendMessage(chatId, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–î–∞', callback_data: 'date_yes' }, { text: '–ù–µ—Ç', callback_data: 'date_no' }]
                    ]
                }
            });
            break;

        case 'enter_date':
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
                state.data.date = text;
                state.step = 'confirmation';
                sendConfirmation(chatId);
            } else {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
            }
            break;
    }
}
async function sendConfirmation(chatId) {
    const { recipient, task, date } = userStates[chatId].data;
    const recipientName = {
        all: '–í—Å–µ',
        matvey: '–ú–∞—Ç–≤–µ–π',
        delaila: '–î–µ–ª–∞–π–ª–∞'
    }[recipient] || recipient;

    const message = `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:\n\n`
        + `üë• –î–ª—è: ${recipientName}\n`
        + `üìù –ó–∞–¥–∞—á–∞: ${task}\n`
        + `üìÖ –î–∞—Ç–∞: ${date || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`;

    await bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_yes' }],
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'confirm_no' }]
            ]
        }
    });


}
async function saveTask(taskData) {
    // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    console.log('Saving task:', taskData);
    const timestamp = taskData.date ? dateToTimestamp(taskData.date) : null
    const dataToSend = {
        owner: taskData.recipient,
        type: '–∑–∞–¥–∞—á–∞',
        text: taskData.task,
        dueDate: timestamp,
        repeat: false,
        createdAt: Date.now(),
        isCompleted: false
    }
    console.log('Saving task:', dataToSend);
    try {
        await axios.post("https://to-do-do-next-red.vercel.app/api/tasks", dataToSend);
        console.log('ok')
    } catch (e) {
        console.log(e)
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return
}


